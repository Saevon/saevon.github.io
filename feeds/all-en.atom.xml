<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saevon.ca</title><link href="//blog.saevon.ca/" rel="alternate"></link><link href="/feeds/all-en.atom.xml" rel="self"></link><id>//blog.saevon.ca/</id><updated>2014-06-20T00:00:00-04:00</updated><entry><title>Using the proper Assembler on Mac OSX</title><link href="//blog.saevon.ca/coding/using-the-proper-assembler-on-mac-osx/" rel="alternate"></link><updated>2014-06-20T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2014-06-20:coding/using-the-proper-assembler-on-mac-osx/</id><summary type="html">&lt;p&gt;The standard compiler &lt;code&gt;gcc&lt;/code&gt; for Mac OSX is actually the &lt;code&gt;clang&lt;/code&gt; compiler, this means that you need to use its assembler and linker as well. If you try to do the compilation in steps, you will notice that &lt;code&gt;as&lt;/code&gt; is not the clang assembler however, which causes it to break down.&lt;/p&gt;
&lt;p&gt;In this article I will discuss a simple solution to this problem.&lt;/p&gt;
&lt;section class="&amp;quot;section section1&amp;quot;" id="intro"&gt;&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;&lt;div class="alert alert-info "&gt;&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
    Jump straight to the &lt;a href="#solution"&gt;solution&lt;/a&gt;, or read about the situation ahead.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;I was working on a microkernel &lt;code&gt;(CS 452: Real Time Programming)&lt;/code&gt;, and I needed to do my compilations with a custom compiler, assembler and linker, so I could compile for ARM. However this required me to use an older version of gcc without the &lt;code&gt;--with-as=&lt;/code&gt; flag, thus I needed to get the assembler to run as a seperate command.&lt;/p&gt;
&lt;p&gt;Enter a complication: I needed this to run tests on my local machine (Mac), as well as on those of my partners (Windows running cygwin), I also needed this to compile on a remote Linux server, which could do the necessary cross-compilation.&lt;/p&gt;
&lt;p&gt;My resulting makefile had the following basic structure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Create the assembly file so that we can use a seperate assembler in the next step&lt;/span&gt;
&lt;span class="nf"&gt;%.s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;%.c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -S &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;

&lt;span class="c"&gt;# Use out assembler to compile an object file&lt;/span&gt;
&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;%.s&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;AS&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;ASFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;

&lt;span class="c"&gt;# Combine the object files using the linker&lt;/span&gt;
&lt;span class="nf"&gt;%.elf&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;%.o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;LD&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LDFLAGS&lt;span class="k"&gt;)&lt;/span&gt; -Map &lt;span class="nv"&gt;$*&lt;/span&gt;.map -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$*&lt;/span&gt;.o &lt;span class="k"&gt;$(&lt;/span&gt;INC&lt;span class="k"&gt;)&lt;/span&gt; -lgcc
    chmod a+r &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First we generate the assembly files, next we assemble the resulting files into object files. Finally we produce the elf file that will represent my Kernel.&lt;/p&gt;
&lt;p&gt;This will run properly on the linux machine, however when I try to use the same makefile to generate code locally, it fails.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="solution"&gt;&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;The error I get looks like this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;test_cbuf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;pseudo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfi_startproc&lt;/span&gt;
&lt;span class="n"&gt;test_cbuf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;pseudo&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfi_def_cfa_offset&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the assemble results from &lt;code&gt;gcc&lt;/code&gt; can't be read by the assembler?&lt;/p&gt;
&lt;p&gt;It seems the &lt;code&gt;gcc&lt;/code&gt; and the &lt;code&gt;as&lt;/code&gt; progams that Mac has by default use differing standards.&lt;/p&gt;
&lt;p&gt;The correct assembler to use uses a command like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;clang -c -x assembler &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;Now to solve my situation above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I can give a different &lt;code&gt;AS = "clang -c -x assembler"&lt;/code&gt; variable to my makefile&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;But then I either need to call it that way always (a pain) or add different instructions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I can add a simple bash script that calls the code above, one that is earlier in my &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I opted for the second solution, mostly since this seems to be a more common use-case for me.&lt;/p&gt;
&lt;/section&gt;</summary><category term="Mac OSX"></category><category term="assembler"></category><category term="clang"></category><category term="Real-Time (Trains)"></category></entry><entry><title>Dial Tones using Javascript</title><link href="//blog.saevon.ca/coding/dial-tones-using-javascript/" rel="alternate"></link><updated>2014-05-30T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2014-05-30:coding/dial-tones-using-javascript/</id><summary type="html">&lt;p&gt;Dial tones are usually just downloaded as WAV files, however, theres a pretty simple algorithm you could run to just generate your own.&lt;/p&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="browsers"&gt;&lt;h2&gt;Browsers&lt;/h2&gt;
&lt;p&gt;I've only tried to use chrome so far, though I've read that Firefox is currently WebRTC capable as well.&lt;/p&gt;
&lt;p&gt;Chrome on OSX seems to work fine (version 27.0.1453.116).&lt;/p&gt;
&lt;p&gt;Chrome on Ubuntu had problems until I updated to a &lt;a href="http://www.ubuntuupdates.org/package/google_chrome/stable/main/base/google-chrome-beta"&gt;Beta version&lt;/a&gt; (version 28.0.1500.52 beta)&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="asterisk"&gt;&lt;h2&gt;Asterisk&lt;/h2&gt;
&lt;p&gt;Asterisk had quite a few requirements before I could get it to work with WebRTC, &lt;a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" title="Asterisk and WebRTC"&gt;see this page for details&lt;/a&gt;.&lt;/p&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="building"&gt;&lt;h4&gt;Building&lt;/h4&gt;
&lt;p&gt;You will likely need to rebuild Asterisk as WebRTC requires a SRTP libraries, which aren't included by default.&lt;/p&gt;
&lt;p&gt;You will need the following libraries on the machine you use to recompile Asterisk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libssl-dev&lt;/li&gt;
&lt;li&gt;libsrtp0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have these libraries installed, you will also need to enable two Asterisk resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;res_srtp.so&lt;/li&gt;
&lt;li&gt;res_http_websocket.so&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can recompile.&lt;/p&gt;
&lt;p&gt;The resulting build might also need a few configuration changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asterisk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http.conf&lt;/code&gt;
    Ensure the following options are set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;bindaddr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="n"&gt;bindport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8088&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modules.conf&lt;/code&gt;
    you must load res_http_websocket.so before chan_sip.so&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sip.conf&lt;/code&gt;
    Any users that you want to allow WebRTC for you need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;encryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;avpf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;
&lt;span class="n"&gt;icesupport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding &lt;strong&gt;encryption=yes&lt;/strong&gt; to any non WebRTC phones might make them break, so be careful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class="alert alert-info "&gt;&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
    Remember to restart Asterisk once you're done.
&lt;/div&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="jssip"&gt;&lt;h2&gt;JsSIP&lt;/h2&gt;
&lt;p&gt;JsSIP &lt;a href="http://jssip.net/" title="JsSip"&gt;JsSIP&lt;/a&gt; was quite easy to use, however it wasn't without its set of problems. If you want to do a quick test yourself, check out the &lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSIP Tryit&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;My main problem was that their script didn't seem to connect with asterisk properly, though I've already forgotten the reason (will update if I do). To solve this I updated to the dev version of JsSIP, which I download from the &lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSIP Tryit&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Afterwards I would also have jssip error out when I tried to type in an invalid target, I patched it quickly removing the potentially erroneous code. I didn't know enough about their side of the problem, so I have no way of knowing if this is a correct fix.&lt;/p&gt;
&lt;p&gt;&lt;div class="alert alert-warning "&gt;&lt;i class="fa fa-warning"&gt;&lt;/i&gt;
    I've included the patch below, use it at your own risk.
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Index: /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gh"&gt;===================================================================&lt;/span&gt;
&lt;span class="gd"&gt;--- /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gi"&gt;+++ /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3372,5 +3372,10 @@&lt;/span&gt;
         console.log(LOG_PREFIX +&amp;#39;ICE candidate received: &amp;#39;+ e.candidate.candidate);
       } else {
&lt;span class="gd"&gt;-        self.onIceCompleted();&lt;/span&gt;
&lt;span class="gi"&gt;+       // PATCH: (saevon) Fixes bug with the code crashing at this step.&lt;/span&gt;
&lt;span class="gi"&gt;+       // since: neither createOffer nor createAnswer get called if you&lt;/span&gt;
&lt;span class="gi"&gt;+       // had an &amp;quot;Invalid Target&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+       // Thus the method doesn&amp;#39;t get added yet&lt;/span&gt;
&lt;span class="gi"&gt;+       if (self.onIceCompleted) {&lt;/span&gt;
&lt;span class="gi"&gt;+           self.onIceCompleted();&lt;/span&gt;
&lt;span class="gi"&gt;+       }&lt;/span&gt;
       }
     };
&lt;/pre&gt;&lt;/div&gt;


&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="conclusion"&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;WebRTC is clearly still a work in progress, and I hope it gets polished up nicely for when I next wish to use it.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="reference"&gt;&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jssip.net/" title="JsSip"&gt;JsSIP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSip Tryit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" title="Asterisk and WebRTC"&gt;Asterisk and WebRTC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</summary><category term="dtmf"></category><category term="javascript"></category></entry><entry><title>Review: Prison Architect</title><link href="//blog.saevon.ca/review/review-prison-architect/" rel="alternate"></link><updated>2014-01-08T00:00:00-05:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2014-01-08:review/review-prison-architect/</id><summary type="html">&lt;p&gt;Prison Architect is a game about creating and managing a prison. You get a plot of land, and slowly build up a secure facility, getting money from the government for storing prisoners, and from grants (quests).&lt;/p&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="review"&gt;&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;&lt;div class="alert alert-warning "&gt;&lt;i class="fa fa-warning"&gt;&lt;/i&gt;
    This game is in Alpha, thus many of the features I recommend and complain about could be planned for.
    This game was pretty fun, don't drop it just cause of this review
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Prison Architect was a pretty fun game to play, though I had some trouble at first, I slowly figured out how to make money and actually expand my prison.&lt;/p&gt;
&lt;p&gt;The game itself involves mostly planning out your building and the rooms inside of it. So it lives up to its name as you really are an architect. There is of course more, such as planning out a regime for the prisoners, hiring staff, and setting up patrols, but the main focus is on design.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="gameplay"&gt;&lt;h2&gt;Gameplay&lt;/h2&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="staff"&gt;&lt;h3&gt;Staff&lt;/h3&gt;
&lt;p&gt;Controlling your staff is still very raw, they just walk around doing whatever tasks they should do with no input from you. The only staff member you can really control is the Guard. A guard can be told to patrol, or to hang out around a specific room, or just to go somewhere.&lt;/p&gt;
&lt;p&gt;The main problem I saw with the staff, was that it was very hard to make multiple Cell Blocks. I tried to make a seperate High Security facility, but all of a sudden all my staff wanted to use its Staff Room to take breaks, "Oh look it has better wi-fi??". This also meant that some of my cooks decided to take over the Kitchen and my other one was understaffed, and other such problems.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="tutorial-descriptions"&gt;&lt;h3&gt;Tutorial &amp;amp; Descriptions&lt;/h3&gt;
&lt;p&gt;The Tutorial was pretty small, and had you start with an already running prison, this meant that I missed out on a lot of the requirements for how to actually build my prison, and instead learned the controls. Instead &lt;em&gt;Tips&lt;/em&gt; might have been more useful while I was building my prison from scratch.&lt;/p&gt;
&lt;p&gt;While playing the actual game I found most of the object to be completely useless, as I had no idea what they do. I still have no Idea whether people used the TVs I installed, or if they did nothing. The game needs a more sims like interface, you can already see the different criteria for a prisoner's happiness, the in game objects just need a "Recreation++, Energy&amp;ndash;" that tells you the result of a prisoner using the object.&lt;/p&gt;
&lt;p&gt;Some rooms actually have requirements for their use, such as a workshop needing 2 types of tables (a Saw and Press), and you can't tell how much of each you'll need in the room. A Kitchen has 3 things it needs, and I still am not sure how to make my cooks support more people. Thus the game needs an expanded information window for objects.&lt;/p&gt;
&lt;p&gt;Similarily I filled up some rooms with useless looking items, why is a filing cabinet needed for an office? what happens if I install more? There should be some benefit, more importantly do prisoners use the chairs, sofas and tables that normally go for staff?&lt;/p&gt;
&lt;p&gt;Looking at utilities it was sometimes hard to work with overlapping water and electricity cables/pipes. Deleting just one was especially hard during such times. Also it wasn't obvious how much electricity/water an object would use, and big vs small pipes should also have a number indicating the maximum they can carry. Electricity also has 2 types of requirements, a &lt;em&gt;small&lt;/em&gt; cable, aka if its close enough to the electricity it automatically gets connected, and a &lt;em&gt;big&lt;/em&gt; cable, aka it needs a cable to connect to it. It would be nice to know which things need what, though as far as I can tell only lights need &lt;em&gt;small&lt;/em&gt; ones. This actually confused me for a bit as CCTV cameras seemed to work, but I guess I just coincidentally put them next to &lt;em&gt;big&lt;/em&gt; cables.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="cell-blocks"&gt;&lt;h3&gt;Cell Blocks&lt;/h3&gt;
&lt;p&gt;As mentioned earlier it was hard to divide the place into cell blocks, I could limit areas to staff only, or to max security, but my staff didn't care. So while I wanted a block to have next to no staff, in case of riots I close it down and call in the Riot squad, thus losing no people, I couldn't.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="prison-capacity"&gt;&lt;h3&gt;Prison Capacity&lt;/h3&gt;
&lt;p&gt;In the game you can either have your prison open for new prisoners, or not. It was annoying to have to open then close the prison, as I specifically made the place for 40 people. I couldn't just say my capacity is 40, then have prisoners come in, or better say the prison is for 30 Med risk, 5 Low risk and 5 High risk.&lt;/p&gt;
&lt;p&gt;This meant that if my prison was running smoothly, and I needed some prisoners I would turn it on, then go start building my new wing, and forget to turn it back off! Thus I would be over capacity, I knew it was too late, a riot was about to happen as the prisoners near starved. But I could do nothing, it would have been nice to ship people back out.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="rooms"&gt;&lt;h3&gt;Rooms&lt;/h3&gt;
&lt;p&gt;The game allows for a very nice variaty of rooms, I felt pretty satisfied by them. While more might be nice, it had all I really needed for a prison.&lt;/p&gt;
&lt;p&gt;The only real problem I saw with rooms was the minimum size requirements, 5x5 for a holding cell? why not 4*7. Maybe a 25m&lt;sup&gt;2&lt;/sup&gt; limit instead?&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="riots"&gt;&lt;h3&gt;Riots&lt;/h3&gt;
&lt;p&gt;Unlike some of the other people online, I had no problem keeping the number of riots down, and once I got a base prison working riots only happened when I screwed up.&lt;/p&gt;
&lt;p&gt;However I'm not sure why, but the prisoners just ran around breaking stuff and killing guards, not trying to escape? Perhaps this was an AI thing though as my prison was sort of confusingly layed out (all the better to trap people in).&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;</summary><category term="prison architect"></category><category term="game"></category></entry><entry><title>Mystic Eye Collection Goggles</title><link href="//blog.saevon.ca/roleplaying/mystic-eye-collection-goggles/" rel="alternate"></link><updated>2013-11-20T00:00:00-05:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-11-20:roleplaying/mystic-eye-collection-goggles/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Magical Item:&lt;/strong&gt; A cursed pair of eye goggles that is used to steal the eyes of creatures. It doubles as a torture device due to its method of extracting them.&lt;/p&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="summary"&gt;&lt;h3&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Attacks creatures within &lt;strong&gt;30 feet&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1/rnd&lt;/strong&gt; do a &lt;strong&gt;Ref 20&lt;/strong&gt; or be forced to wear them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concentration 16&lt;/strong&gt; or launch an eye every &lt;strong&gt;10rnds&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;When shapeshifting with eyes, you get its abilities.&lt;/li&gt;
&lt;li&gt;Takes up the &lt;strong&gt;Headband&lt;/strong&gt; slot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cursed Item&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="extraction"&gt;&lt;h3&gt;Extraction&lt;/h3&gt;
&lt;p&gt;Any creature wearing these goggles will see red marks appearing over everything they focus on. The more they focus on something the brighter the mark on it. The less they focus, the darker (or non-existent) the mark.&lt;/p&gt;
&lt;p&gt;If a creature focuses on something for too long they feel some pressure build up behind their eyes, until, the eye is popped out of its socket, and launched towards the targeted mark.&lt;/p&gt;
&lt;p&gt;When an eye is launched, a hard protective case is build up around it in the shape of a cylindrical glass container, a &lt;em&gt;Stasis Glass&lt;/em&gt;. The eye is held in a stasis field which prevents any damage unless the container itself is opened.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="how-its-used"&gt;&lt;h3&gt;How it's Used&lt;/h3&gt;
&lt;p&gt;The Goggles are attracted to any creature with eyes that is within 1 size category of its size. When within &lt;strong&gt;30 feet&lt;/strong&gt; of such a creature they fly at their eyes, attaching themselves. The target gets a &lt;strong&gt;Reflex Save (DC: 20)&lt;/strong&gt; to block, though the goggles will keep trying &lt;strong&gt;1/rnd&lt;/strong&gt;. &lt;strong&gt;Every 10rnds&lt;/strong&gt; hereafter the target will need to do a &lt;strong&gt;concentration check (DC: 16)&lt;/strong&gt; to not focus too much (and launch 1 eye).&lt;/p&gt;
&lt;p&gt;The Goggles are considered a &lt;strong&gt;Headband&lt;/strong&gt; magical item, thus preventing you from using any goggles, eye glasses or other such items.&lt;/p&gt;
&lt;p&gt;The Goggles are considered a cursed item for the sake of getting them off, thus &lt;strong&gt;Remove Curse&lt;/strong&gt; will make them fall off, after which they will take &lt;strong&gt;1d10&lt;/strong&gt; rnds to recover (launching one of their eyes on failure).&lt;/p&gt;
&lt;p&gt;The Goggles are usually encountered as a stranded item, acting like a trap. However in reality these Goggles are used to collect Mystic Eyes, thus there is a way to control them. The Goggles are created with a small container to hold them. The container has an arcane symbol to press when you need to stop the goggles from attacking things, and another to get them to start up again.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="stasis-glass"&gt;&lt;h3&gt;Stasis Glass&lt;/h3&gt;
&lt;p&gt;Any eye in a Stasis Glass can't get any damage until the container breaks. This makes it the best way to store eyes until you have a need for them.&lt;/p&gt;
&lt;p&gt;Due to a quirk in its production any shapeshifting while holding an eye grants the user that eye. This takes up the &lt;strong&gt;Headband&lt;/strong&gt; slot, preventing any other magic items from functioning. You can have as many eye changes as is available to your current form, thought this is mandatory. Using this you can change eye colour, shape and other such details. If you hold more eyes than your form has, you get to choose which ones work (or roll for randomness).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hardness:&lt;/strong&gt; 15&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HP:&lt;/strong&gt; 20&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aura:&lt;/strong&gt; Strong Transmutation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the Stasis glass is broken, it disappears, but the contents fall out (and are probably ruined)&lt;/p&gt;
&lt;/section&gt;</summary><category term="magic-item"></category><category term="D&amp;D"></category></entry><entry><title>Review: Game Dev Tycoon</title><link href="//blog.saevon.ca/review/review-game-dev-tycoon/" rel="alternate"></link><updated>2013-10-04T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-10-04:review/review-game-dev-tycoon/</id><summary type="html">&lt;p&gt;Game Dev Tycoon is an interesting game that puts the player into the shoes of a game developer from the 80's. Re-invent your favourite games, combat piracy, or even embrace it. Its a unique game due to its differing gameplay between the legit and pirated versions.&lt;/p&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="review"&gt;&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;A quick warning, this review is written just before the move to the 3rd office, and thus might not fully reflect all the game options. I just felt it was best to write this while its fresh in my mind.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.greenheartgames.com/2013/04/29/what-happens-when-pirates-play-a-game-development-simulator-and-then-go-bankrupt-because-of-piracy/"&gt;See this link for details about the piracy aspect.&lt;/a&gt;&lt;/p&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="controls"&gt;&lt;h3&gt;Controls&lt;/h3&gt;
&lt;p&gt;The game uses a menu for most of its controls, you click on the screen and a menu opens up. I found this a bit unweldy, as sometimes this meant it went above the other icons at the top, making them hard to see.&lt;/p&gt;
&lt;p&gt;There was also a minor bug that made me sometimes manipulate a menu in the background while I was on the "New Game" window. I'd be trying to click to type the game name, but be clicking on menu options.&lt;/p&gt;
&lt;p&gt;One suggestion which I thought would be nice, would be to highlight staff when you hover over them, that would make it more obvious that there are seperate menus. Thought it was pretty clear after a click or two.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="gameplay"&gt;&lt;h3&gt;Gameplay&lt;/h3&gt;
&lt;p&gt;I found the game was a bit confusing, I was always just guessing what options to choose, and sometimes the game I imagined and the game that I apparantly made didn't match.&lt;/p&gt;
&lt;p&gt;The game creation menu was nice, but sometimes I wish I could cross some genres such as Zombie/Horror.&lt;/p&gt;
&lt;p&gt;The three stages were also a little confusing, I had already made tons of games by this point, yet the requirements still eluded me. If I was actually making games, after that many games and game reports I would have long since compiled the effects of each stage on the topics and genres. While I sometime get hints saying "+++?" it just didn't seem like I was getting enough for my efforts, sure I could have actually written reports myself, but this is a casual game to me.&lt;/p&gt;
&lt;p&gt;I also found the "Design" and "Technology" bubbles to be confusing, I had no idea what it meant to get better points there, except that it was probably good. Nor how each staff member and choice could effect it. My characters had stats, but I couldn't figure out why I'd care for that very reason.&lt;/p&gt;
&lt;p&gt;Research was pretty well done, I found that I could mostly guess when I'd get lots of research points, it was intuitive.&lt;/p&gt;
&lt;p&gt;When choosing projects to work on, I felt I should have more control over who does what, while I could train, and research individually, it would be nice to do that as a group as well. Conversely I felt that my staff could produce multiple games, as I could do them by myself at the start, especially when I really needed money, and didn't mind going red to get money faster&lt;/p&gt;
&lt;p&gt;On a similar topic, the medium game didn't tell me my team would have been swamped and incapable of finishing it without giving 130% each.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="graphics"&gt;&lt;h3&gt;Graphics&lt;/h3&gt;
&lt;p&gt;I found the graphics to be to my liking, the cartoonish sprites, and backgrounds to be very fitting. They didn't take too much of the focus, making you see the whole office as important, rather than focusing on your individual avatar.&lt;/p&gt;
&lt;p&gt;Speaking of the avatar, I found there wasn't too much options for making an avatar, I think hair style and colour could have been seperated. Otherwise I had all the options I needed to get someone I liked.&lt;/p&gt;
&lt;p&gt;The time bar at the top left was not very well done either, as I found the numbers just faded away and were unimportant to me. If it was more obvious what year it was (1980 + the given year I guess) it might have been nice, especially when I was talking to my friends about how I released these cool games in (what year would this be again?). I remember one conversation vividly, where my friend stated, "maybe the world isn't ready for your ground breaking Zombie/Sim :P", and I took forever to figure out what year that was in real time. The other time values could have been better shown as well.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="sounds"&gt;&lt;h3&gt;Sounds&lt;/h3&gt;
&lt;p&gt;I found the sounds were okay, they were reminiscent of the much older games I liked to play, and totally fit in with the time and feel of the game. However there wasn't much more about them, thus I can see how the developers took their own gameplay to heart, not putting much effort into the sounds.&lt;/p&gt;
&lt;p&gt;Overall I did like them, and feel that the game really didn't need much effort in this category.&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="conclusion"&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This game was a very fun game, however I still felt there was room for improvement. I wish the best of luck to the developers of this game, and hope their sequel or expansion is awesome.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="reference"&gt;&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.greenheartgames.com/2013/04/29/what-happens-when-pirates-play-a-game-development-simulator-and-then-go-bankrupt-because-of-piracy/"&gt;Piracy in a game dev game!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</summary><category term="game dev tycoon"></category><category term="game"></category><category term="Greenheart Games"></category></entry><entry><title>Python Virtual Environments and PIP</title><link href="//blog.saevon.ca/coding/python-virtual-environments-and-pip/" rel="alternate"></link><updated>2013-07-12T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-07-12:coding/python-virtual-environments-and-pip/</id><summary type="html">&lt;p&gt;virtualenv is a pretty awesome tool for any python user, however it is often too easy to accidentally install new packages into the wrong place. Here I show you how to separate your system packages and that of your project environments.&lt;/p&gt;
&lt;section class="&amp;quot;section section1&amp;quot;" id="intro"&gt;&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Jump "straight" to the &lt;a href="#Syspip"&gt;Syspip&lt;/a&gt; section if you know all about python packaging and virtualenv.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="virtualenvwrapper"&gt;&lt;h1&gt;virtualenvwrapper&lt;/h1&gt;
&lt;p&gt;This is a really useful tool, even if it adds binaries with amazingly long names. It lets you easily and quickly list, add, and switch to a virtualenv.&lt;/p&gt;
&lt;p&gt;I don't usually need all the many options this script provides, and would also prefer for it to be easier to combine the virtualenvwrapper's and git's PS1 prompt changes.&lt;/p&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="changing-environments"&gt;&lt;h3&gt;Changing Environments&lt;/h3&gt;
&lt;p&gt;To change environments is pretty easy, you just use the &lt;code&gt;workon&lt;/code&gt; command. This works whether you have a currently active environment or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;workon &lt;span class="nv"&gt;$env_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To deactivate the current environment you use the &lt;code&gt;deactivate&lt;/code&gt; command, just like normal. Though personally I though workoff was more obvious.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;workoff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="tab-completion"&gt;&lt;h3&gt;Tab Completion!&lt;/h3&gt;
&lt;p&gt;When using the &lt;code&gt;workon&lt;/code&gt; command you can tab complete to see the list of all the environments you have.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="addremove-environments"&gt;&lt;h3&gt;Add/Remove Environments&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Add a new environment&lt;/span&gt;
mkvirtualenv &lt;span class="nv"&gt;$env_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Remove an environment&lt;/span&gt;
rmvirtualenv &lt;span class="nv"&gt;$env_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="syspip"&gt;&lt;h1&gt;Syspip&lt;/h1&gt;
&lt;p&gt;Heres where stuff gets interesting. To prevent mistakes while installing packages, I've added the following things to my bash startup scripts (&lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash_aliases&lt;/code&gt;, etc.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# .bashrc&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.environments
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PIP_VIRTUALENV_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WORKON_HOME

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PIP_REQUIRE_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First notice that we set &lt;code&gt;PIP_REQUIRE_VIRTUALENV&lt;/code&gt;, this ensures that pip &lt;em&gt;will not&lt;/em&gt; run without an active virtual environment.&lt;/p&gt;
&lt;p&gt;Second, do remember to set &lt;code&gt;PIP_VIRTUALENV_BASE&lt;/code&gt;, since that is what pip uses to tell if you have an environment active. (AFAIK)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# .bash_aliases&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SYSTEM_PIP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which pip&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;syspip &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;PIP_REQUIRE_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; sudo &lt;span class="nv"&gt;$SYSTEM_PIP&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first find which version of pip we use, then add a new way of using the global pip binary. Now you have 2 ways of installing a package, each of which always installs to the expected location.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To install &lt;strong&gt;only&lt;/strong&gt; for the currently active environment, (or fail if it doesn't find one)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To install &lt;strong&gt;only&lt;/strong&gt; globally&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;syspip install &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class="alert alert-warning "&gt;&lt;i class="fa fa-warning"&gt;&lt;/i&gt;
    Don't forget to load &lt;code&gt;.bash_aliases&lt;/code&gt; before you activate any environments, otherwise &lt;code&gt;syspip&lt;/code&gt; might not work as advertised.
&lt;/div&gt;&lt;/p&gt;
&lt;/section&gt;</summary><category term="python"></category><category term="virtualenv"></category><category term="pip"></category></entry><entry><title>Review: Alex Rider</title><link href="//blog.saevon.ca/review/review-alex-rider/" rel="alternate"></link><updated>2013-07-08T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-07-08:review/review-alex-rider/</id><summary type="html">&lt;p&gt;Alex Rider is a story about a kid learning the truth about his parent. Having been secretly trained as a spy from birth, he's coerced into working for the MI6 and always ends up saving the world from unknown catastrophy.&lt;/p&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="review"&gt;&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;It has been a while since I last read books from the Alex Rider series, but I can tell you they're worth re-reading.&lt;/p&gt;
&lt;p&gt;The general plot follows Alex as he gets into difficult situations and uses his wits, training, and cool gadgets to escape hazards. He often not only triumphs, but comes out ahead, finding some new source of information which helps him uncover the final evil plan.&lt;/p&gt;
&lt;p&gt;The series is quite easy to be immersed in, and nicely portrays the problems and challenges a spy might be facing. Some potential inaccuracy does exist, however it is outshadowed by the greater benefit it usually presents to the overall story. You can see that the author did his research, and consulted experts in quite a few fields when writing his books.&lt;/p&gt;
&lt;p&gt;One of the main characteristics of this series is that Alex does not often wish to follow along with every Secret Service's requests for help. This is very realistic portrayal of the most likely reaction of a kid put in the situation he faces, and while I would prefer not to see him being coerced into these situations, it makes Alex seem much more normal and provides more believability to the story.&lt;/p&gt;
&lt;p&gt;The evil villains of the Alex Rider universe do follow the standard James Bond procedure, but all seem to have unique quirks that make them much more. Not all of them would blab out their evil plan when Alex is caught and about to be killed, though most of them do end up leaving him to die.&lt;/p&gt;
&lt;p&gt;Psychology plays a big part in the series, as we see Alex get hurt mentally with everything he goes through, and even though he seems to get back up a little too resiliently, it makes reading the books all the more accurate and enjoyable.&lt;/p&gt;
&lt;/section&gt;</summary><category term="alex rider"></category><category term="book"></category></entry><entry><title>WebRTC with JsSIP and Asterisk</title><link href="//blog.saevon.ca/coding/webrtc-with-jssip-and-asterisk/" rel="alternate"></link><updated>2013-07-04T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-07-04:coding/webrtc-with-jssip-and-asterisk/</id><summary type="html">&lt;p&gt;Recently I've been trying to get a web phone up and running, my only real requirement was to use Asterisk. So I decided to go with the following technology stack, JsSIP, Chrome and Asterisk.&lt;/p&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="browsers"&gt;&lt;h2&gt;Browsers&lt;/h2&gt;
&lt;p&gt;I've only tried to use chrome so far, though I've read that Firefox is currently WebRTC capable as well.&lt;/p&gt;
&lt;p&gt;Chrome on OSX seems to work fine (version 27.0.1453.116).&lt;/p&gt;
&lt;p&gt;Chrome on Ubuntu had problems until I updated to a &lt;a href="http://www.ubuntuupdates.org/package/google_chrome/stable/main/base/google-chrome-beta"&gt;Beta version&lt;/a&gt; (version 28.0.1500.52 beta)&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="asterisk"&gt;&lt;h2&gt;Asterisk&lt;/h2&gt;
&lt;p&gt;Asterisk had quite a few requirements before I could get it to work with WebRTC, &lt;a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" title="Asterisk and WebRTC"&gt;see this page for details&lt;/a&gt;.&lt;/p&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="building"&gt;&lt;h4&gt;Building&lt;/h4&gt;
&lt;p&gt;You will likely need to rebuild Asterisk as WebRTC requires a SRTP libraries, which aren't included by default.&lt;/p&gt;
&lt;p&gt;You will need the following libraries on the machine you use to recompile Asterisk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libssl-dev&lt;/li&gt;
&lt;li&gt;libsrtp0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have these libraries installed, you will also need to enable two Asterisk resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;res_srtp.so&lt;/li&gt;
&lt;li&gt;res_http_websocket.so&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can recompile.&lt;/p&gt;
&lt;p&gt;The resulting build might also need a few configuration changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asterisk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http.conf&lt;/code&gt;
    Ensure the following options are set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;bindaddr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="n"&gt;bindport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8088&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modules.conf&lt;/code&gt;
    you must load res_http_websocket.so before chan_sip.so&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sip.conf&lt;/code&gt;
    Any users that you want to allow WebRTC for you need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;encryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;avpf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;
&lt;span class="n"&gt;icesupport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding &lt;strong&gt;encryption=yes&lt;/strong&gt; to any non WebRTC phones might make them break, so be careful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class="alert alert-info "&gt;&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
    Remember to restart Asterisk once you're done.
&lt;/div&gt;&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="jssip"&gt;&lt;h2&gt;JsSIP&lt;/h2&gt;
&lt;p&gt;JsSIP &lt;a href="http://jssip.net/" title="JsSip"&gt;JsSIP&lt;/a&gt; was quite easy to use, however it wasn't without its set of problems. If you want to do a quick test yourself, check out the &lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSIP Tryit&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;My main problem was that their script didn't seem to connect with asterisk properly, though I've already forgotten the reason (will update if I do). To solve this I updated to the dev version of JsSIP, which I download from the &lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSIP Tryit&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Afterwards I would also have jssip error out when I tried to type in an invalid target, I patched it quickly removing the potentially erroneous code. I didn't know enough about their side of the problem, so I have no way of knowing if this is a correct fix.&lt;/p&gt;
&lt;p&gt;&lt;div class="alert alert-warning "&gt;&lt;i class="fa fa-warning"&gt;&lt;/i&gt;
    I've included the patch below, use it at your own risk.
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Index: /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gh"&gt;===================================================================&lt;/span&gt;
&lt;span class="gd"&gt;--- /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gi"&gt;+++ /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3372,5 +3372,10 @@&lt;/span&gt;
         console.log(LOG_PREFIX +&amp;#39;ICE candidate received: &amp;#39;+ e.candidate.candidate);
       } else {
&lt;span class="gd"&gt;-        self.onIceCompleted();&lt;/span&gt;
&lt;span class="gi"&gt;+       // PATCH: (saevon) Fixes bug with the code crashing at this step.&lt;/span&gt;
&lt;span class="gi"&gt;+       // since: neither createOffer nor createAnswer get called if you&lt;/span&gt;
&lt;span class="gi"&gt;+       // had an &amp;quot;Invalid Target&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+       // Thus the method doesn&amp;#39;t get added yet&lt;/span&gt;
&lt;span class="gi"&gt;+       if (self.onIceCompleted) {&lt;/span&gt;
&lt;span class="gi"&gt;+           self.onIceCompleted();&lt;/span&gt;
&lt;span class="gi"&gt;+       }&lt;/span&gt;
       }
     };
&lt;/pre&gt;&lt;/div&gt;


&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="conclusion"&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;WebRTC is clearly still a work in progress, and I hope it gets polished up nicely for when I next wish to use it.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="reference"&gt;&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jssip.net/" title="JsSip"&gt;JsSIP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSip Tryit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" title="Asterisk and WebRTC"&gt;Asterisk and WebRTC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</summary><category term="webrtc"></category><category term="jssip"></category><category term="javascript"></category><category term="asterisk"></category></entry><entry><title>Hello World!</title><link href="//blog.saevon.ca/personal/hello-world/" rel="alternate"></link><updated>2013-07-03T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-07-03:personal/hello-world/</id><summary type="html">&lt;p&gt;Welcome to my Blog!&lt;/p&gt;
&lt;p&gt;So I've finally decided to get myself a blog, after seeing a few options I decided to go with Jekyll and Github Pages.&lt;/p&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="purpose"&gt;&lt;h2&gt;Purpose&lt;/h2&gt;
&lt;p&gt;I feel this blog could combine most of my passions, coding, movies, and anything else I feel like blogging about. To that end my goal is to separate the main page into multiple post groups. Each group would let you see new posts from that category.&lt;/p&gt;
&lt;p&gt;As I add more topics I will update this post.&lt;/p&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="coding"&gt;&lt;h4&gt;Coding&lt;/h4&gt;
&lt;p&gt;This would list any CS related topics, and though the title is "Coding" it would include algorithms and other such theoretical topics.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section4&amp;quot;" id="media"&gt;&lt;h4&gt;Media&lt;/h4&gt;
&lt;p&gt;This would be a conglomeration of any movies, books, and other such topics. Mostly this will compose of reviews.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section4&amp;quot;" id="rant"&gt;&lt;h4&gt;Rant&lt;/h4&gt;
&lt;p&gt;Miscellaneous talks will go here&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section2&amp;quot;" id="conclusion"&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;div class="alert alert-success "&gt;&lt;i class="fa fa-noicon"&gt;&lt;/i&gt;
    &lt;strong&gt;Thank you&lt;/strong&gt; for reading this far
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Expect to see many changes for the next months as I customize this blog and personalize as much as I can.&lt;/p&gt;
&lt;/section&gt;</summary><category term="rant"></category></entry><entry><title>CS 452: Kernel 3</title><link href="//blog.saevon.ca/personal/k-3/" rel="alternate"></link><updated>2013-06-11T00:00:00-04:00</updated><author><name>Saevon</name></author><id>tag://blog.saevon.ca,2013-06-11:personal/k-3/</id><summary type="html">&lt;hr /&gt;
&lt;div class="names-block"&gt;
&lt;div class="names-block-person" markdown="1"&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Serghei Filippov&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Student ID&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;20390471&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="names-block-person"&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Anton Pravdin&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Student ID&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;20378263&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="names-block-person"&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Steven Chen&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Student ID&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;20381661&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;section class="&amp;quot;section section1&amp;quot;" id="overview"&gt;&lt;h1&gt;1. Overview&lt;/h1&gt;
&lt;p&gt;This program is a basic kernel created for the ARM920T processor. It supports some basic system calls, multiple (non-preemptive) concurrent usertasks. With this, you can schedule user programs to run with a priority.&lt;/p&gt;
&lt;p&gt;There is now a main menu with which a user can now control which programs are run, one of which is the K3 user program. For testing purposes the user is not limited to executing only one program at a time. Note: some of the test programs are designed to utilize as much of the system resources as possible, such as the forkbomb or spawner scripts.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="docs"&gt;&lt;h1&gt;2. Documentation&lt;/h1&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="syscalls"&gt;&lt;h3&gt;2.1 Syscalls&lt;/h3&gt;
&lt;p&gt;The following syscalls were added to the kernel&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;AwaitEvent(int event_type)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Blocks the task until the event defined by &lt;code&gt;event_type&lt;/code&gt; happens.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The delay syscalls implement &lt;code&gt;ticks&lt;/code&gt; which represent a &lt;code&gt;10ms&lt;/code&gt; time period within the kernel.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Delay(time_t ticks)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Blocks the task for a specific number of ticks specified by the &lt;code&gt;ticks&lt;/code&gt; argument.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;DelayUntil(time_t ticks)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Blocks the task until a specific time specified by the &lt;code&gt;ticks&lt;/code&gt; argument&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The following extra system calls were also added for convinience.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Wait(tid_t tid)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Blocks the task until the specified task has died.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Halt( )&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Halts the system immediately.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Assert( msg, function, line )&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Prints an assert message, then halts the system. This means user programs won't get fragmented assertion prints&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;UnregisterAs(char *name)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Unregister a service from the nameserver. Uses tid to validate the request.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;ForceUnregisterAs(char *name)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Forcefully remove a registered service from the nameserver. (Disregard who the service belongs to)&lt;/dd&gt;
&lt;dd&gt;This syscall was included to make repetitive runs of certain user tests possible.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="3-design-technical-details"&gt;&lt;h1&gt;3. Design &amp;amp; Technical Details&lt;/h1&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="31-structures-algorythms"&gt;&lt;h3&gt;3.1 Structures &amp;amp; Algorythms&lt;/h3&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="311-ordered-linked-list"&gt;&lt;h4&gt;3.1.1 Ordered Linked List&lt;/h4&gt;
&lt;p&gt;To store the list of tasks that are waiting on a &lt;code&gt;delay&lt;/code&gt; or a &lt;code&gt;delay_until&lt;/code&gt; we use an &lt;b&gt;ordered link list&lt;/b&gt;. We predefine a number of nodes equal to the amount of tasks descriptors available at one time so that we know every task can be waiting. We decided to use a linear runtime insert so that we could ensure our resulting list will be sorted. We do this so that we can have a faster read because we will have to check to see if anything needs to be replied to every tick while we only insert it once and read only the top items.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section4&amp;quot;" id="312-circular-buffer"&gt;&lt;h4&gt;3.1.2 Circular Buffer&lt;/h4&gt;
&lt;p&gt;A Circular buffer has been added, this is for future usage.&lt;/p&gt;
&lt;p&gt;It has been created as a circular linked list, with the standard circular buffer functions. With the circular buffer, we can ensure the space gets reused properly. Also you can now use the standard overwriting property of a circular bufer to nsure the array only has N elements, overwritting the oldest one. This was (and can be) used to display things like the latest N sensor updates.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section4&amp;quot;" id="313-linked-list"&gt;&lt;h4&gt;3.1.3 Linked List&lt;/h4&gt;
&lt;p&gt;We re-used our linked list structure to hold the list of tasks waiting on each specific event.&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="32-kernel"&gt;&lt;h3&gt;3.2 Kernel&lt;/h3&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="321-hardware-interrupts"&gt;&lt;h4&gt;3.2.1 Hardware Interrupts&lt;/h4&gt;
&lt;p&gt;The hardware interrupt is very similar to our current context switch. We decided to keep the two context switches in seperate functions for now even though they share some code.&lt;/p&gt;
&lt;p&gt;When a hardware interrupt happens:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We jump to the irq_enter function&lt;/li&gt;
&lt;li&gt;We store the user state exactly as the swi_enter does&lt;ul&gt;
&lt;li&gt;Since we use the same code to load, this must be done identically&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We save the link register&lt;/li&gt;
&lt;li&gt;We store a constant syscall id &lt;code&gt;SYSCALL_ID_IRQ&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;So our kernel knows that it shouldn't do any system call stuff&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reload the kernel as normal&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the end of the &lt;code&gt;activate&lt;/code&gt; function we now load the user &lt;code&gt;PC&lt;/code&gt; and &lt;code&gt;CPSR&lt;/code&gt; at the same time to ensure that the user's stack is properly loaded and saved.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="33-user-tasks"&gt;&lt;h3&gt;3.3 User Tasks&lt;/h3&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="331-clock-server-and-notifiers"&gt;&lt;h4&gt;3.3.1 Clock Server and Notifiers&lt;/h4&gt;
&lt;p&gt;Our &lt;code&gt;clockserver&lt;/code&gt; is a simple forever loop with a switch statement that just receives and handles the request. It blocks waiting user tasks by not replying until their delay has been reached. Our clock server does not keep time.&lt;/p&gt;
&lt;p&gt;Our clock server handles the delay events by adding the requested delay to the current time and storing this number along with the tasks tid in an &lt;code&gt;ordered linked list&lt;/code&gt;. For delay_until, we simply do the same but store only the inputted ticks. The server then checks through the &lt;code&gt;ordered linked list&lt;/code&gt; for tasks to unblock.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;clock_notifiers&lt;/code&gt; is also a simple forever loop that waits on the &lt;code&gt;TIMER3&lt;/code&gt; interrupt. On every interrupt, the notifier will increment it's &lt;code&gt;cur_time&lt;/code&gt; variable to keep time. We have it here so that in the case we choose not to send to the clock server every tick, the time count will not be affects. Every loop, it will send the current time to &lt;code&gt;clockserver&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="34-optimizations"&gt;&lt;h3&gt;3.4 Optimizations&lt;/h3&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="341-task-descriptor"&gt;&lt;h3&gt;3.4.1 Task descriptor&lt;/h3&gt;
&lt;p&gt;In order to save room on the task descriptor struct (for when we lock it to cache) we removed the return value pointer from it. It is now saved directly into the user's stack during &lt;code&gt;sys_handle&lt;/code&gt;. We can do this because we have the user's stack pointer and know the offset of the return value pointer.&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="342-memcpy"&gt;&lt;h3&gt;3.4.2 Memcpy&lt;/h3&gt;
&lt;p&gt;Memcpy has been modified to copy in batch sizes. This change has positive, but very minor changes to majority of the copy operations since they are generally not large enough to utilize the optimization. But it does dramatically decrease the execution time of the few large copy operations. Especially if the size of the data is a multiple of 32 bytes, since we use at most 8 registers &lt;code&gt;r3-r10&lt;/code&gt; to perform the copy. This optimization will allow us to perform demanding string copy operations when the time comes.&lt;/p&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="4-program-output"&gt;&lt;h1&gt;4. Program Output&lt;/h1&gt;
&lt;p&gt;This program can be run from the main menu by pressing the number &lt;code&gt;3&lt;/code&gt; key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterations&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="5-bugs"&gt;&lt;h1&gt;5. Bugs&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Currently the hash table used by the nameserver does not handle collisions. We used a fairly large table and a well tested hash function to deter these collisions.&lt;/li&gt;
&lt;/ol&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="51-quirks"&gt;&lt;h3&gt;5.1 Quirks&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If a task keeps dying and being created, while no other tasks change status, then its &lt;code&gt;task_id&lt;/code&gt; is reused, and incremented by &lt;code&gt;TOTAL_TASKS&lt;/code&gt;. Thus you see major jumps in &lt;code&gt;task_id&lt;/code&gt; values. &lt;em&gt;Note: we have added a tail pointer to our task array, so now the tasks recycle better, but this can still happen in a very rare case&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;e.g. with TOTAL_TASKS = 64&lt;/p&gt;
&lt;p&gt;4 &amp;gt;&amp;gt; 68 &amp;gt;&amp;gt; 132 &amp;gt;&amp;gt; 196 &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a temporary fix, until we get to the IO Server up and running, when returning from hardware interrupts, the task is scheduled back onto the front of it's priority. This means that it schedules using &lt;code&gt;FILO&lt;/code&gt; instead of &lt;code&gt;Round Robin&lt;/code&gt;. We do this to avoid user tasks getting interrupted during a print and causing the output to be jumbled up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="6-thoughts-and-comments"&gt;&lt;h1&gt;6. Thoughts and Comments&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;My thoughts, for anyone trying to understand the code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="61-code-flags"&gt;&lt;h3&gt;6.1 Code Flags&lt;/h3&gt;
&lt;p&gt;There are a few flags that you can pass into the preprocessor, which allow you to try a few things. See the &lt;code&gt;Common.mk&lt;/code&gt; file in the root directory. There you will find the &lt;code&gt;DEFINES&lt;/code&gt; variable, where you can uncomment these flags and compile. You can also play around with the extra compiler flags.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Enables the &lt;code&gt;ASSERTS&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;This also enables any debug only code, notably the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prints an overview of the kernel state after every task run. This includes the syscall request, its arguments, and any return values (which may not make sense if the syscall does not return a value)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;ASSERTS&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Enables &lt;code&gt;asserts&lt;/code&gt; and other things in the &lt;code&gt;assert.h&lt;/code&gt; file,&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;LOCAL&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Used to toggle required changes to compile the test-suite for my machine&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;We can also toggle some optimizations&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;ENABLE_CACHE&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Turns on the caches&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;OPT_MEMCPY&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Turns on the memcpy optimization&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;OPT_ATTRIBUTES&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Toggles the function attibutes which give gcc more information&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt;: Doesn't read/write to globals&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pure&lt;/code&gt;: Only reads globals&lt;/p&gt;
&lt;p&gt;&lt;code&gt;noret&lt;/code&gt;: The function is not expected to return;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;naked&lt;/code&gt;: GCC will not add any function entry/exit code&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="62-todos"&gt;&lt;h3&gt;6.2 Todos&lt;/h3&gt;
&lt;p&gt;The important todo's are listed below:&lt;/p&gt;
&lt;p&gt;The other miscellaneous todos go here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;task_id&lt;/code&gt; needs to overflow properly, otherwise it will wrap around to potentially in-use &lt;code&gt;task_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also the following need to be thought about&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our Stack is currently using space that manages to be empty (calculated by us) however we can just allocate an array of STACK_SIZE * TOTAL_TASKS, and use that array to ensure there will be room, and we won't be using memory that might be taken by the kernel later.&lt;/li&gt;
&lt;/ul&gt;
&lt;section class="&amp;quot;section section4&amp;quot;" id="631-optimization-todos"&gt;&lt;h4&gt;6.3.1 Optimization TODOs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;g++ -O2 -falign-functions=16 -falign-loops=16 (alignment)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare the -Os to our current -O3 flags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-flto (can be set to individual files https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html) or -fwhole-program (linker optimizations)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test out the arm compiler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently the hardware interrupt code is mostly a copy of the software interrupt code. We can probably try to optimize them both further by removing things specific to each one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to figure out what to cache lock, and re-arrange them to be in consequtive memory. Currently we call many functions when doing system calls, which would incur overhead since they would be in different memory regions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section class="&amp;quot;section section1&amp;quot;" id="7-files-how-to-run"&gt;&lt;h1&gt;7. Files &amp;amp; How to Run&lt;/h1&gt;
&lt;section class="&amp;quot;section section2&amp;quot;" id="71-getting-code-access"&gt;&lt;h2&gt;7.1 Getting Code Access&lt;/h2&gt;
&lt;p&gt;There are 2 ways of getting access to the code&lt;/p&gt;
&lt;section class="&amp;quot;section section3&amp;quot;" id="711-github"&gt;&lt;h3&gt;7.1.1 Github&lt;/h3&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;Site&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;https://github.com/login&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Username&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;Searea&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;Password&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;cs452_access&lt;/code&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;After logging in you just need to go to the following url &lt;code&gt;https://github.com/Saevon-Altimit/Trains/tree/k3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you wish to clone the repo, there is an ssh key in the &lt;code&gt;ssh&lt;/code&gt; folder, this grants anyone read-only access to the repo. (minimal git knowledge is assumed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# The ./ssh/cs452 data goes here&lt;/span&gt;
vim ~/.ssh/id_rsa
&lt;span class="c"&gt;# The ./ssh/cs452.pub data goes here&lt;/span&gt;
vim ~/.ssh/id_rsa.pub

git clone git@github.com:Saevon-Altimit/Trains.git trains

&lt;span class="c"&gt;# NOTE: There are now 3 tags which indicate different submissions: k1, k2, and k3&lt;/span&gt;
&lt;span class="c"&gt;# So we need to switch to the correct branch&lt;/span&gt;
git checkout k3
&lt;/pre&gt;&lt;/div&gt;


&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="712-school-linux-servers"&gt;&lt;h3&gt;7.1.2 School Linux Servers&lt;/h3&gt;
&lt;p&gt;It is unknown whether the &lt;code&gt;cs452_sf&lt;/code&gt; group grants you access to folders within, however if this is true, you can find the code in &lt;code&gt;/u8/sfilippov/cs452/kernel-3/&lt;/code&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="72-compilation-and-misc-uses"&gt;&lt;h3&gt;7.2 Compilation and Misc Uses&lt;/h3&gt;
&lt;p&gt;The program can be compiled by executing the following command, note that the resulting &lt;code&gt;*.elf&lt;/code&gt; files will be in the &lt;code&gt;main&lt;/code&gt; folder. A copy of the resulting &lt;code&gt;*.elf&lt;/code&gt; files will also be in the root directory, as a precaution.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;submit.elf&lt;/code&gt; file is the submission file, it runs the kernel 3 task, then waits for a &lt;code&gt;q&lt;/code&gt; keypress to exit. It provides a console menu above, so you can play around with it more.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Run this in the root folder of the project&lt;/span&gt;
make kern
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember! there are some flags you can pass in to customize the compiled product, see section &lt;code&gt;6.2 Code Flags&lt;/code&gt;. (Or look at the main Makefile)&lt;/p&gt;
&lt;p&gt;There are also a few more things you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# run the unit tests on your machine&lt;/span&gt;
&lt;span class="c"&gt;# WARNING: this will not compile with the wmcowan gcc&lt;/span&gt;
&lt;span class="c"&gt;#   this is made to compile with normal gcc&lt;/span&gt;
&lt;span class="c"&gt;#   so some path tweaking, or not doing this on the school servers, is required&lt;/span&gt;
make &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/section&gt;&lt;section class="&amp;quot;section section3&amp;quot;" id="73-files-md5"&gt;&lt;h3&gt;7.3 Files &amp;amp; MD5&lt;/h3&gt;
&lt;div class="md5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bwio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;c6b99f3cc99905e2800680d7353b250&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cc52b0b6ce582f4fe7d13bd3ef53a52a&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;858376e4649&lt;/span&gt;&lt;span class="n"&gt;ecfdc4ab8a0e0eb8c168a&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="n"&gt;a4b1a0ca13f5e800f7e2efbec20667&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="n"&gt;cc5525ca867bee79c50accc8d8f0bb&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pqueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;caec69935ce7d7136616666b5085cb8&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eb924ee9052b4594d36fca4f1f644813&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;a6ad3149a012238a414aa8a7c95364c&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;61f&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;de5eda4fe3fb9819ecb7ae6b9ca8&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;528e62&lt;/span&gt;&lt;span class="n"&gt;cb00459a09f9ae301c76d89b62&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ts7200&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a7be86663a46ddf66cdc3cea59bf3a28&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;699271&lt;/span&gt;&lt;span class="n"&gt;c531466966ee5dcf6f01e21317&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stdtype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;d6264e93f95bda95582ca65826194f1&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b8d122201fee6bfac0e0b8032ecbdeae&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;ce2660776640fd49b7acfec3a93324&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfa349ff6c03d8ca3174d2edee576bde&lt;/span&gt;

&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f86662bd294cc18c4aed266489dd531b&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Cred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="n"&gt;d27c6b9c7f3e97f2b8741e747ce62&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                              &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d8f3d09a2c1d4bc03162930d4c6e800b&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="n"&gt;b20f79d3a0bcccc67b4e6e60ffc654&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;forkbomb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a106ed3519f33358bfb0355f83e8391e&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;a1352005329b5fdf37b9929104a5483&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spawner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;6834f&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;b0faa2f98ccc69cff4cdd5fe67&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;voider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df2b5ce305ccdd9155a9b8a2cf33ad49&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;orex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e74784fc9d2207bcf1843f68c350f8f2&lt;/span&gt;

&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e244b32cc00c9e88364b51c253340d42&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;356&lt;/span&gt;&lt;span class="n"&gt;ea1ad022df01cc3d510c9a7639e00&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b3600b57c524a86b58db5a5da4fc6786&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="n"&gt;d60b790b38c979f7b68ac2e8a99967&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;93f8200424f&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;d55addb58425c5d4224&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;b4c7c3e6264cf924df63a61069fa919&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pqueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e6d628482fa726809d207e8b1637340e&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_create&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;de349799f26e259d492500c9d7d89018&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_exit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;d09aa1c4e3bede262cb05a214ad2695&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_get_parent_tid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;a53d4f6e1d2c7063404f0618d72d1e9&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_get_priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;de080b04eb5acccf5676ca11f6782fdb&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_get_tid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bf9d43ea8570c4c5f7d48b3b112d5ce5&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_handle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16237681&lt;/span&gt;&lt;span class="n"&gt;d973e2009b24529acbef4fa0&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_pass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;448491&lt;/span&gt;&lt;span class="n"&gt;bc79bca6e55e505cc5a630b62c&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys_set_priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33181&lt;/span&gt;&lt;span class="n"&gt;ee630bcf3aecefdbd8cfb7be4bb&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kern&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;06f&lt;/span&gt;&lt;span class="n"&gt;edbcb5c39ab6c60c4d12513530291&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bwio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;d6e950323e0cb3d5d788a682c0a491e&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fake_bwio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9667&lt;/span&gt;&lt;span class="n"&gt;a9be550162fdb3c442ddb52d9243&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b3c01a9f67146bf042b9072e5b5c9675&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stdlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ad7427f8c92901418c5e2e4773ab12e4&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d16d11126776e6c6cfc1a90ae8547337&lt;/span&gt;

&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="n"&gt;a2cecbbad14c26fce8c0b49154a660&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;armtest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="n"&gt;c94900ce147444ca37dddcf9bced30&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;armtest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;b2321883e83c3403c08d9c2d04c0c39&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fb0d58dc497091a0ea7d4f09d665ccd7&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;63e8314&lt;/span&gt;&lt;span class="n"&gt;c03f8d2966d8568c06f807408&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_handle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ed54a9683f165f9814111d2d0d171bf4&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_linklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7413&lt;/span&gt;&lt;span class="n"&gt;d7b097d401c445d8fa066b3f109e&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_pqueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;bcc968e96a858a20af0b8043c3f398&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_pqueue_priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;575e9&lt;/span&gt;&lt;span class="n"&gt;e2ca0b3ed70e8e158c284af3322&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ac9f56de292958078b48a34029156077&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_syscall&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;333971&lt;/span&gt;&lt;span class="n"&gt;b4fae238d67895c3028cc1cc1c&lt;/span&gt;
&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test_task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;226&lt;/span&gt;&lt;span class="n"&gt;a6658e4f93529f1d785b058e6fb81&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;</summary><category term="assignment"></category></entry></feed>