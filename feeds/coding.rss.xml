<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Saevon.ca</title><link>blog.saevon.ca/</link><description></description><atom:link href="/feeds/coding.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 12 Jul 2013 00:00:00 -0400</lastBuildDate><item><title>Python Virtual Environments and PIP</title><link>blog.saevon.ca/coding/python-virtualenv/</link><description>&lt;p&gt;virtualenv is a pretty awesome tool for any python user, however it is often too easy to accidentally install new pacakges into the wrong place. Here I show you how to separate your system packages and that of your project environments.&lt;/p&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;Jump "straight"&amp;hellip; to the &lt;a href="#Syspip"&gt;Syspip&lt;/a&gt; section if you know all about python packaging and virtualenv.&lt;/p&gt;
&lt;h1&gt;virtualenvwrapper&lt;/h1&gt;
&lt;p&gt;This is a really useful tool, even if it adds binaries with amazingly long names. It lets you easily and quickly list, add, and switch to a virtualenv.&lt;/p&gt;
&lt;p&gt;I don't usually need all the many options this script provides, and would also prefer for it to be easier to combine the virtualenvwrapper's and git's PS1 prompt changes.&lt;/p&gt;
&lt;h3&gt;Changing Environments&lt;/h3&gt;
&lt;p&gt;To change environments is pretty easy, you just use the &lt;code&gt;workon&lt;/code&gt; command. This works whether you have a currently active environment or not.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;workon &lt;span class="nv"&gt;$env_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To deactivate the current environment you use the &lt;code&gt;deactivate&lt;/code&gt; command, just like normal. Though personally I though workoff was more obvious.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;workoff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Tab Completion!&lt;/h3&gt;
&lt;p&gt;When using the &lt;code&gt;workon&lt;/code&gt; command you can tab complete to see the list of all the environments you have.&lt;/p&gt;
&lt;h3&gt;Add/Remove Environments&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Add a new environment&lt;/span&gt;
mkvirtualenv &lt;span class="nv"&gt;$env_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Remove an environment&lt;/span&gt;
rmvirtualenv &lt;span class="nv"&gt;$env_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Syspip&lt;/h1&gt;
&lt;p&gt;Heres where stuff gets interesting. To prevent mistakes while installing packages, I've added the following things to my bash startup scripts (&lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash_aliases&lt;/code&gt;, etc.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# .bashrc&lt;/span&gt;

&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.environments
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PIP_VIRTUALENV_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;WORKON_HOME

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PIP_REQUIRE_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First notice that we set &lt;code&gt;PIP_REQUIRE_VIRTUALENV&lt;/code&gt;, this ensures that pip &lt;em&gt;will not&lt;/em&gt; run without an active virtual environment.&lt;/p&gt;
&lt;p&gt;Second, do remember to set &lt;code&gt;PIP_VIRTUALENV_BASE&lt;/code&gt;, since that is what pip uses to tell if you have an environment active. (AFAIK)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# .bash_aliases&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SYSTEM_PIP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which pip&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;syspip &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;PIP_REQUIRE_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; sudo &lt;span class="nv"&gt;$SYSTEM_PIP&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we first find which version of pip we use, then add a new way of using the global pip binary. Now you have 2 ways of installing a package, each of which always installs to the expected location.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To install &lt;strong&gt;only&lt;/strong&gt; for the currently active environment, (or fail if it doesn't find one)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To install &lt;strong&gt;only&lt;/strong&gt; globally&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;syspip install &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class="alert alert-warning "&gt;&lt;i class="fa fa-warning"&gt;&lt;/i&gt;
    Don't forget to load &lt;code&gt;.bash_aliases&lt;/code&gt; before you activate any environments, otherwise &lt;code&gt;syspip&lt;/code&gt; might not work as advertised.
&lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saevon</dc:creator><pubDate>Fri, 12 Jul 2013 00:00:00 -0400</pubDate><guid>tag:blog.saevon.ca,2013-07-12:coding/python-virtualenv/</guid><category>python</category><category>virtualenv</category><category>pip</category></item><item><title>WebRTC with JsSIP and Asterisk</title><link>blog.saevon.ca/coding/webrtc-jssip-asterisk/</link><description>&lt;p&gt;Recently I've been trying to get a web phone up and running, my only real requirement was to use Asterisk. So I decided to go with the following technology stack, JsSIP, Chrome and Asterisk.&lt;/p&gt;
&lt;h2&gt;Browsers&lt;/h2&gt;
&lt;p&gt;I've only tried to use chrome so far, though I've read that Firefox is currently WebRTC capable as well.&lt;/p&gt;
&lt;p&gt;Chrome on OSX seems to work fine (version 27.0.1453.116).&lt;/p&gt;
&lt;p&gt;Chrome on Ubuntu had problems until I updated to a &lt;a href="http://www.ubuntuupdates.org/package/google_chrome/stable/main/base/google-chrome-beta"&gt;Beta version&lt;/a&gt; (version 28.0.1500.52 beta)&lt;/p&gt;
&lt;h2&gt;Asterisk&lt;/h2&gt;
&lt;p&gt;Asterisk had quite a few requirements before I could get it to work with WebRTC, &lt;a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" title="Asterisk and WebRTC"&gt;see this page for details&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Building&lt;/h4&gt;
&lt;p&gt;You will likely need to rebuild Asterisk as WebRTC requires a SRTP libraries, which aren't included by default.&lt;/p&gt;
&lt;p&gt;You will need the following libraries on the machine you use to recompile Asterisk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libssl-dev&lt;/li&gt;
&lt;li&gt;libsrtp0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have these libraries installed, you will also need to enable two Asterisk resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;res_srtp.so&lt;/li&gt;
&lt;li&gt;res_http_websocket.so&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can recompile.&lt;/p&gt;
&lt;p&gt;The resulting build might also need a few configuration changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asterisk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
  &lt;span class="o"&gt;|--&lt;/span&gt; &lt;span class="n"&gt;sip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http.conf&lt;/code&gt;
    Ensure the following options are set&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;bindaddr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="n"&gt;bindport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8088&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;modules.conf&lt;/code&gt;
    you must load res_http_websocket.so before chan_sip.so&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sip.conf&lt;/code&gt;
    Any users that you want to allow WebRTC for you need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;encryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;avpf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;transport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;wss&lt;/span&gt;
&lt;span class="n"&gt;icesupport&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding &lt;strong&gt;encryption=yes&lt;/strong&gt; to any non WebRTC phones might make them break, so be careful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div class="alert alert-info "&gt;&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
    Remember to restart Asterisk once you're done.
&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;JsSIP&lt;/h2&gt;
&lt;p&gt;JsSIP &lt;a href="http://jssip.net/" title="JsSip"&gt;JsSIP&lt;/a&gt; was quite easy to use, however it wasn't without its set of problems. If you want to do a quick test yourself, check out the &lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSIP Tryit&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;My main problem was that their script didn't seem to connect with asterisk properly, though I've already forgotten the reason (will update if I do). To solve this I updated to the dev version of JsSIP, which I download from the &lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSIP Tryit&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Afterwards I would also have jssip error out when I tried to type in an invalid target, I patched it quickly removing the potentially erroneous code. I didn't know enough about their side of the problem, so I have no way of knowing if this is a correct fix.&lt;/p&gt;
&lt;p&gt;&lt;div class="alert alert-warning "&gt;&lt;i class="fa fa-warning"&gt;&lt;/i&gt;
    I've included the patch below, use it at your own risk.
&lt;/div&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;Index: /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gh"&gt;===================================================================&lt;/span&gt;
&lt;span class="gd"&gt;--- /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gi"&gt;+++ /static/js/jssip-devel.js&lt;/span&gt;
&lt;span class="gu"&gt;@@ -3372,5 +3372,10 @@&lt;/span&gt;
         console.log(LOG_PREFIX +&amp;#39;ICE candidate received: &amp;#39;+ e.candidate.candidate);
       } else {
&lt;span class="gd"&gt;-        self.onIceCompleted();&lt;/span&gt;
&lt;span class="gi"&gt;+       // PATCH: (saevon) Fixes bug with the code crashing at this step.&lt;/span&gt;
&lt;span class="gi"&gt;+       // since: neither createOffer nor createAnswer get called if you&lt;/span&gt;
&lt;span class="gi"&gt;+       // had an &amp;quot;Invalid Target&amp;quot;&lt;/span&gt;
&lt;span class="gi"&gt;+       // Thus the method doesn&amp;#39;t get added yet&lt;/span&gt;
&lt;span class="gi"&gt;+       if (self.onIceCompleted) {&lt;/span&gt;
&lt;span class="gi"&gt;+           self.onIceCompleted();&lt;/span&gt;
&lt;span class="gi"&gt;+       }&lt;/span&gt;
       }
     };
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;WebRTC is clearly still a work in progress, and I hope it gets polished up nicely for when I next wish to use it.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jssip.net/" title="JsSip"&gt;JsSIP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jssip.tryit.net" title="JsSip Tryit"&gt;JsSip Tryit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.asterisk.org/wiki/display/AST/Asterisk+WebRTC+Support" title="Asterisk and WebRTC"&gt;Asterisk and WebRTC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saevon</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 -0400</pubDate><guid>tag:blog.saevon.ca,2013-07-04:coding/webrtc-jssip-asterisk/</guid><category>webrtc</category><category>jssip</category><category>javascript</category><category>asterisk</category></item></channel></rss>